package dart

import (
	pgs "github.com/lyft/protoc-gen-star"
)

// Context resolves Dart-specific language for Packages & Entities generated by
// protoc-gen-dart.
type Context interface {
	// Params returns the Parameters associated with this context.
	Params() pgs.Parameters

	// Name returns the name of a Node as it would appear in the generation output
	// of protoc-gen-go. For each type, the following is returned:
	//
	//     - Package: Empty String
	//     - File: Empty String
	//     - Message: the class name
	//     - Field: the field name on the Message class
	//     - OneOf: the field name on the Message class
	//     - Enum: the enum class name
	//     - EnumValue: the constant name
	//     - Service: the server interface name
	//     - Method: the method name on the server and client interface
	//
	Name(node pgs.Node) pgs.Name

	// ServerName returns the name of the server interface for the Service.
	ServerName(service pgs.Service) pgs.Name

	// ClientName returns the name of the client interface for the Service.
	ClientName(service pgs.Service) pgs.Name

	// ServerStream returns the name of the grpc.ServerStream wrapper for this
	// method. This name is only used if client or server streaming is
	// implemented for this method.
	ServerStream(method pgs.Method) pgs.Name

	// OneofOption returns the struct name that wraps a OneOf option's value. These
	// messages contain one field, matching the value returned by Name for this
	// Field.
	OneofOption(field pgs.Field) pgs.Name

	// TypeName returns the type name of a Field as it would appear in the
	// generated message struct from protoc-gen-dart. Fields from imported
	// packages will be prefixed with the package name.
	Type(field pgs.Field) TypeName

	// OutputPath returns the output path relative to the plugin's output destination
	OutputPath(entity pgs.Entity) pgs.FilePath
}

type context struct{ p pgs.Parameters }

func (c context) OutputPath(e pgs.Entity) pgs.FilePath {
	return e.File().InputPath().SetExt(".pb.dart")
}

// InitContext configures a Context that should be used for deriving Go names
// for all Packages and Entities.
func InitContext(params pgs.Parameters) Context {
	return context{params}
}

func (c context) Params() pgs.Parameters { return c.p }
